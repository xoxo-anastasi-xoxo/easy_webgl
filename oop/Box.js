/**
 * Тег my-box. Определяет форму прямоугольного параллелепипеда.
 */
class Box {
    /**
     * Создает экземпляр Box.
     * @constructor
     * @this  {Box}
     *
     * @param boxElement Ссылка на DOM-элемент, который иллюстрирует этот объект.
     * @param func {Function} Функция-колбэк, которая должна оповестить об окончании загрузки данных фигуры.
     */
    constructor(boxElement, func) {
        // Определим все неодходимые поля.
        /**
         * Размер по трем осям.
         * @type {number[]}
         */
        this.size = [10, 10, 10];
        /**
         * Ссылка на DOM-элемент, который иллюстрирует этот объект.
         */
        this.boxElement = boxElement;
        //
        /**
         * Массив вершин фигуры.
         * @type {number[]}
         */
        this.vertices = [];
        /**
         * Массив нормалей фигуры.
         * @type {number[]}
         */
        this.normals = [];
        /**
         * Массив индексов поверхностей фигуры.
         * @type {number[]}
         */
        this.indices = undefined;

        // Запустим инициализацию полей атрибутами.
        this.init();
        // Вызываемколл-бэк.
        func(this);
    }

    /**
     * Инициализирует трехмерный объект Box, используя атрибуты тега my-box.
     * Задает вершины и нормали, необходимые для отрисовки прямоугольного параллелепипеда.
     *
     * Из атрибута size вида массив получаются размеры параллелепипеда по соответствующим сторонам.
     * По умолчанию size="10 10 10".
     * Центр прямоугольного параллепипеда совпадает с началом координат.
     */
    init() {
        // Получаем из атрибута размеры фигры или оставляем их значения по умолчанию.
        if (this.boxElement.attributes["size"])
            this.size =
                this.boxElement.attributes["size"].value.split(" ").map(value => parseFloat(value));

        // Выполняем проверку полученных данных.
        Utils.checkArrayAttribute(this.size, "my-box", "size");

        // Задаем вершины нашей фигуры.
        let x = this.size[0] / 2;
        let y = this.size[1] / 2;
        let z = this.size[2] / 2;

        this.vertices = [
            // передняя
            -x, y, z,
            -x, -y, z,
            x, -y, z,
            -x, y, z,
            x, -y, z,
            x, y, z,

            // правая
            x, y, z,
            x, -y, z,
            x, -y, -z,
            x, y, z,
            x, -y, -z,
            x, y, -z,

            // задняя
            x, y, -z,
            x, -y, -z,
            -x, -y, -z,
            x, y, -z,
            -x, -y, -z,
            -x, y, -z,

            // левая
            -x, y, -z,
            -x, -y, -z,
            -x, -y, z,
            -x, y, -z,
            -x, -y, z,
            -x, y, z,

            // верхняя
            -x, y, -z,
            -x, y, z,
            x, y, z,
            -x, y, -z,
            x, y, z,
            x, y, -z,

            // нижняя
            -x, -y, -z,
            x, -y, z,
            -x, -y, z,
            -x, -y, -z,
            x, -y, -z,
            x, -y, z,
        ];

        // Задаем нормали для нашей фигуры.
        this.normals = [
            // передняя
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,

            // правая
            1, 0, 0,
            1, 0, 0,
            1, 0, 0,
            1, 0, 0,
            1, 0, 0,
            1, 0, 0,

            // задняя
            0, 0, -1,
            0, 0, -1,
            0, 0, -1,
            0, 0, -1,
            0, 0, -1,
            0, 0, -1,

            // левая
            -1, 0, 0,
            -1, 0, 0,
            -1, 0, 0,
            -1, 0, 0,
            -1, 0, 0,
            -1, 0, 0,

            // верхняя
            0, 1, 0,
            0, 1, 0,
            0, 1, 0,
            0, 1, 0,
            0, 1, 0,
            0, 1, 0,

            // нижняя
            0, -1, 0,
            0, -1, 0,
            0, -1, 0,
            0, -1, 0,
            0, -1, 0,
            0, -1, 0,
        ];
    }
}